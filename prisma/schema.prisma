generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Dataset {
  id          String   @id @default(cuid())
  name        String
  description String?
  fileType    String
  fileUrl     String
  isPublic    Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  itemCount   Int      @default(0)
  views       DatasetView[] @relation("DatasetToView")
  savedBy     SavedDataset[] @relation("DatasetToSavedDataset")

  @@index([userId])
  @@index([isPublic])
  @@index([createdAt])
  @@index([updatedAt])
  // Composite index for common queries
  @@index([userId, isPublic, updatedAt])
}

model DatasetView {
  id        String   @id @default(cuid())
  userId    String?
  datasetId String
  viewedAt  DateTime @default(now())
  dataset   Dataset  @relation("DatasetToView", fields: [datasetId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([datasetId, userId])
  @@index([userId, viewedAt])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  datasets Dataset[]

  @@index([name])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  datasets      Dataset[]
  datasetViews  DatasetView[]
  savedDatasets SavedDataset[]

  theme           String    @default("system")
  autoTag         Boolean   @default(true)
  publicByDefault Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model SavedDataset {
  id        String   @id @default(cuid())
  dataset   Dataset  @relation("DatasetToSavedDataset", fields: [datasetId], references: [id], onDelete: Cascade)
  datasetId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, datasetId])
  @@index([userId, createdAt])
  @@index([datasetId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
